### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

type categories {
  category_id: Int!
  category_name: String!
  description: String
  products(after: productsWhereUniqueInput, before: productsWhereUniqueInput, first: Int, last: Int): [products!]!
}

input categoriesCreateInput {
  category_id: Int!
  category_name: String!
  description: String
  products: productsCreateManyWithoutCategoriesInput
}

input categoriesCreateOneWithoutProductsInput {
  connect: categoriesWhereUniqueInput
  create: categoriesCreateWithoutProductsInput
}

input categoriesCreateWithoutProductsInput {
  category_id: Int!
  category_name: String!
  description: String
}

input categoriesOrderByInput {
  category_id: OrderByArg
  category_name: OrderByArg
  description: OrderByArg
}

input categoriesUpdateInput {
  category_id: Int
  category_name: String
  description: String
  products: productsUpdateManyWithoutCategoriesInput
}

input categoriesUpdateManyMutationInput {
  category_id: Int
  category_name: String
  description: String
}

input categoriesUpdateOneWithoutProductsInput {
  connect: categoriesWhereUniqueInput
  create: categoriesCreateWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  update: categoriesUpdateWithoutProductsDataInput
  upsert: categoriesUpsertWithoutProductsInput
}

input categoriesUpdateWithoutProductsDataInput {
  category_id: Int
  category_name: String
  description: String
}

input categoriesUpsertWithoutProductsInput {
  create: categoriesCreateWithoutProductsInput!
  update: categoriesUpdateWithoutProductsDataInput!
}

input categoriesWhereInput {
  AND: [categoriesWhereInput!]
  category_id: IntFilter
  category_name: StringFilter
  description: NullableStringFilter
  NOT: [categoriesWhereInput!]
  OR: [categoriesWhereInput!]
  products: productsFilter
}

input categoriesWhereUniqueInput {
  category_id: Int
}

input Customer_idCustomer_type_idCompoundUniqueInput {
  customer_id: String!
  customer_type_id: String!
}

type customercustomerdemo {
  customer_id: String!
  customer_type_id: String!
  customerdemographics: customerdemographics!
  customers: customers!
  desc: String!
}

input customercustomerdemoCreateInput {
  customerdemographics: customerdemographicsCreateOneWithoutCustomercustomerdemoInput!
  customers: customersCreateOneWithoutCustomercustomerdemoInput!
  desc: String!
}

input customercustomerdemoCreateManyWithoutCustomerdemographicsInput {
  connect: [customercustomerdemoWhereUniqueInput!]
  create: [customercustomerdemoCreateWithoutCustomerdemographicsInput!]
}

input customercustomerdemoCreateManyWithoutCustomersInput {
  connect: [customercustomerdemoWhereUniqueInput!]
  create: [customercustomerdemoCreateWithoutCustomersInput!]
}

input customercustomerdemoCreateWithoutCustomerdemographicsInput {
  customers: customersCreateOneWithoutCustomercustomerdemoInput!
  desc: String!
}

input customercustomerdemoCreateWithoutCustomersInput {
  customerdemographics: customerdemographicsCreateOneWithoutCustomercustomerdemoInput!
  desc: String!
}

input customercustomerdemoFilter {
  every: customercustomerdemoWhereInput
  none: customercustomerdemoWhereInput
  some: customercustomerdemoWhereInput
}

input customercustomerdemoOrderByInput {
  customer_id: OrderByArg
  customer_type_id: OrderByArg
  desc: OrderByArg
}

input customercustomerdemoScalarWhereInput {
  AND: [customercustomerdemoScalarWhereInput!]
  customer_id: StringFilter
  customer_type_id: StringFilter
  desc: StringFilter
  NOT: [customercustomerdemoScalarWhereInput!]
  OR: [customercustomerdemoScalarWhereInput!]
}

input customercustomerdemoUpdateInput {
  customerdemographics: customerdemographicsUpdateOneRequiredWithoutCustomercustomerdemoInput
  customers: customersUpdateOneRequiredWithoutCustomercustomerdemoInput
  desc: String
}

input customercustomerdemoUpdateManyDataInput {
  desc: String
}

input customercustomerdemoUpdateManyMutationInput {
  desc: String
}

input customercustomerdemoUpdateManyWithoutCustomerdemographicsInput {
  connect: [customercustomerdemoWhereUniqueInput!]
  create: [customercustomerdemoCreateWithoutCustomerdemographicsInput!]
  delete: [customercustomerdemoWhereUniqueInput!]
  deleteMany: [customercustomerdemoScalarWhereInput!]
  disconnect: [customercustomerdemoWhereUniqueInput!]
  set: [customercustomerdemoWhereUniqueInput!]
  update: [customercustomerdemoUpdateWithWhereUniqueWithoutCustomerdemographicsInput!]
  updateMany: [customercustomerdemoUpdateManyWithWhereNestedInput!]
  upsert: [customercustomerdemoUpsertWithWhereUniqueWithoutCustomerdemographicsInput!]
}

input customercustomerdemoUpdateManyWithoutCustomersInput {
  connect: [customercustomerdemoWhereUniqueInput!]
  create: [customercustomerdemoCreateWithoutCustomersInput!]
  delete: [customercustomerdemoWhereUniqueInput!]
  deleteMany: [customercustomerdemoScalarWhereInput!]
  disconnect: [customercustomerdemoWhereUniqueInput!]
  set: [customercustomerdemoWhereUniqueInput!]
  update: [customercustomerdemoUpdateWithWhereUniqueWithoutCustomersInput!]
  updateMany: [customercustomerdemoUpdateManyWithWhereNestedInput!]
  upsert: [customercustomerdemoUpsertWithWhereUniqueWithoutCustomersInput!]
}

input customercustomerdemoUpdateManyWithWhereNestedInput {
  data: customercustomerdemoUpdateManyDataInput!
  where: customercustomerdemoScalarWhereInput!
}

input customercustomerdemoUpdateWithoutCustomerdemographicsDataInput {
  customers: customersUpdateOneRequiredWithoutCustomercustomerdemoInput
  desc: String
}

input customercustomerdemoUpdateWithoutCustomersDataInput {
  customerdemographics: customerdemographicsUpdateOneRequiredWithoutCustomercustomerdemoInput
  desc: String
}

input customercustomerdemoUpdateWithWhereUniqueWithoutCustomerdemographicsInput {
  data: customercustomerdemoUpdateWithoutCustomerdemographicsDataInput!
  where: customercustomerdemoWhereUniqueInput!
}

input customercustomerdemoUpdateWithWhereUniqueWithoutCustomersInput {
  data: customercustomerdemoUpdateWithoutCustomersDataInput!
  where: customercustomerdemoWhereUniqueInput!
}

input customercustomerdemoUpsertWithWhereUniqueWithoutCustomerdemographicsInput {
  create: customercustomerdemoCreateWithoutCustomerdemographicsInput!
  update: customercustomerdemoUpdateWithoutCustomerdemographicsDataInput!
  where: customercustomerdemoWhereUniqueInput!
}

input customercustomerdemoUpsertWithWhereUniqueWithoutCustomersInput {
  create: customercustomerdemoCreateWithoutCustomersInput!
  update: customercustomerdemoUpdateWithoutCustomersDataInput!
  where: customercustomerdemoWhereUniqueInput!
}

input customercustomerdemoWhereInput {
  AND: [customercustomerdemoWhereInput!]
  customer_id: StringFilter
  customer_type_id: StringFilter
  customerdemographics: customerdemographicsWhereInput
  customers: customersWhereInput
  desc: StringFilter
  NOT: [customercustomerdemoWhereInput!]
  OR: [customercustomerdemoWhereInput!]
}

input customercustomerdemoWhereUniqueInput {
  customer_id_customer_type_id: Customer_idCustomer_type_idCompoundUniqueInput
}

type customerdemographics {
  customer_desc: String
  customer_type_id: String!
  customercustomerdemo(after: customercustomerdemoWhereUniqueInput, before: customercustomerdemoWhereUniqueInput, first: Int, last: Int): [customercustomerdemo!]!
}

input customerdemographicsCreateInput {
  customer_desc: String
  customer_type_id: String!
  customercustomerdemo: customercustomerdemoCreateManyWithoutCustomerdemographicsInput
}

input customerdemographicsCreateOneWithoutCustomercustomerdemoInput {
  connect: customerdemographicsWhereUniqueInput
  create: customerdemographicsCreateWithoutCustomercustomerdemoInput
}

input customerdemographicsCreateWithoutCustomercustomerdemoInput {
  customer_desc: String
  customer_type_id: String!
}

input customerdemographicsOrderByInput {
  customer_desc: OrderByArg
  customer_type_id: OrderByArg
}

input customerdemographicsUpdateInput {
  customer_desc: String
  customer_type_id: String
  customercustomerdemo: customercustomerdemoUpdateManyWithoutCustomerdemographicsInput
}

input customerdemographicsUpdateManyMutationInput {
  customer_desc: String
  customer_type_id: String
}

input customerdemographicsUpdateOneRequiredWithoutCustomercustomerdemoInput {
  connect: customerdemographicsWhereUniqueInput
  create: customerdemographicsCreateWithoutCustomercustomerdemoInput
  update: customerdemographicsUpdateWithoutCustomercustomerdemoDataInput
  upsert: customerdemographicsUpsertWithoutCustomercustomerdemoInput
}

input customerdemographicsUpdateWithoutCustomercustomerdemoDataInput {
  customer_desc: String
  customer_type_id: String
}

input customerdemographicsUpsertWithoutCustomercustomerdemoInput {
  create: customerdemographicsCreateWithoutCustomercustomerdemoInput!
  update: customerdemographicsUpdateWithoutCustomercustomerdemoDataInput!
}

input customerdemographicsWhereInput {
  AND: [customerdemographicsWhereInput!]
  customer_desc: NullableStringFilter
  customer_type_id: StringFilter
  customercustomerdemo: customercustomerdemoFilter
  NOT: [customerdemographicsWhereInput!]
  OR: [customerdemographicsWhereInput!]
}

input customerdemographicsWhereUniqueInput {
  customer_type_id: String
}

type customers {
  address: String
  city: String
  company_name: String!
  contact_name: String
  contact_title: String
  country: String
  customer_id: String!
  customercustomerdemo(after: customercustomerdemoWhereUniqueInput, before: customercustomerdemoWhereUniqueInput, first: Int, last: Int): [customercustomerdemo!]!
  fax: String
  orders(after: ordersWhereUniqueInput, before: ordersWhereUniqueInput, first: Int, last: Int): [orders!]!
  phone: String
  postal_code: String
  region: String
}

input customersCreateInput {
  address: String
  city: String
  company_name: String!
  contact_name: String
  contact_title: String
  country: String
  customer_id: String!
  customercustomerdemo: customercustomerdemoCreateManyWithoutCustomersInput
  fax: String
  orders: ordersCreateManyWithoutCustomersInput
  phone: String
  postal_code: String
  region: String
}

input customersCreateOneWithoutCustomercustomerdemoInput {
  connect: customersWhereUniqueInput
  create: customersCreateWithoutCustomercustomerdemoInput
}

input customersCreateOneWithoutOrdersInput {
  connect: customersWhereUniqueInput
  create: customersCreateWithoutOrdersInput
}

input customersCreateWithoutCustomercustomerdemoInput {
  address: String
  city: String
  company_name: String!
  contact_name: String
  contact_title: String
  country: String
  customer_id: String!
  fax: String
  orders: ordersCreateManyWithoutCustomersInput
  phone: String
  postal_code: String
  region: String
}

input customersCreateWithoutOrdersInput {
  address: String
  city: String
  company_name: String!
  contact_name: String
  contact_title: String
  country: String
  customer_id: String!
  customercustomerdemo: customercustomerdemoCreateManyWithoutCustomersInput
  fax: String
  phone: String
  postal_code: String
  region: String
}

input customersOrderByInput {
  address: OrderByArg
  city: OrderByArg
  company_name: OrderByArg
  contact_name: OrderByArg
  contact_title: OrderByArg
  country: OrderByArg
  customer_id: OrderByArg
  fax: OrderByArg
  phone: OrderByArg
  postal_code: OrderByArg
  region: OrderByArg
}

input customersUpdateInput {
  address: String
  city: String
  company_name: String
  contact_name: String
  contact_title: String
  country: String
  customer_id: String
  customercustomerdemo: customercustomerdemoUpdateManyWithoutCustomersInput
  fax: String
  orders: ordersUpdateManyWithoutCustomersInput
  phone: String
  postal_code: String
  region: String
}

input customersUpdateManyMutationInput {
  address: String
  city: String
  company_name: String
  contact_name: String
  contact_title: String
  country: String
  customer_id: String
  fax: String
  phone: String
  postal_code: String
  region: String
}

input customersUpdateOneRequiredWithoutCustomercustomerdemoInput {
  connect: customersWhereUniqueInput
  create: customersCreateWithoutCustomercustomerdemoInput
  update: customersUpdateWithoutCustomercustomerdemoDataInput
  upsert: customersUpsertWithoutCustomercustomerdemoInput
}

input customersUpdateOneWithoutOrdersInput {
  connect: customersWhereUniqueInput
  create: customersCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: customersUpdateWithoutOrdersDataInput
  upsert: customersUpsertWithoutOrdersInput
}

input customersUpdateWithoutCustomercustomerdemoDataInput {
  address: String
  city: String
  company_name: String
  contact_name: String
  contact_title: String
  country: String
  customer_id: String
  fax: String
  orders: ordersUpdateManyWithoutCustomersInput
  phone: String
  postal_code: String
  region: String
}

input customersUpdateWithoutOrdersDataInput {
  address: String
  city: String
  company_name: String
  contact_name: String
  contact_title: String
  country: String
  customer_id: String
  customercustomerdemo: customercustomerdemoUpdateManyWithoutCustomersInput
  fax: String
  phone: String
  postal_code: String
  region: String
}

input customersUpsertWithoutCustomercustomerdemoInput {
  create: customersCreateWithoutCustomercustomerdemoInput!
  update: customersUpdateWithoutCustomercustomerdemoDataInput!
}

input customersUpsertWithoutOrdersInput {
  create: customersCreateWithoutOrdersInput!
  update: customersUpdateWithoutOrdersDataInput!
}

input customersWhereInput {
  address: NullableStringFilter
  AND: [customersWhereInput!]
  city: NullableStringFilter
  company_name: StringFilter
  contact_name: NullableStringFilter
  contact_title: NullableStringFilter
  country: NullableStringFilter
  customer_id: StringFilter
  customercustomerdemo: customercustomerdemoFilter
  fax: NullableStringFilter
  NOT: [customersWhereInput!]
  OR: [customersWhereInput!]
  orders: ordersFilter
  phone: NullableStringFilter
  postal_code: NullableStringFilter
  region: NullableStringFilter
}

input customersWhereUniqueInput {
  customer_id: String
}

scalar DateTime

input Employee_idTerritory_idCompoundUniqueInput {
  employee_id: Int!
  territory_id: String!
}

type employees {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int!
  employees: employees
  employeeterritories(after: employeeterritoriesWhereUniqueInput, before: employeeterritoriesWhereUniqueInput, first: Int, last: Int): [employeeterritories!]!
  extension: String
  first_name: String!
  hire_date: DateTime
  home_phone: String
  last_name: String!
  notes: String
  orders(after: ordersWhereUniqueInput, before: ordersWhereUniqueInput, first: Int, last: Int): [orders!]!
  other_employees(after: employeesWhereUniqueInput, before: employeesWhereUniqueInput, first: Int, last: Int): [employees!]!
  photo_path: String
  postal_code: String
  region: String
  reports_to: Int
  title: String
  title_of_courtesy: String
}

input employeesCreateInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int!
  employees: employeesCreateOneWithoutOther_employeesInput
  employeeterritories: employeeterritoriesCreateManyWithoutEmployeesInput
  extension: String
  first_name: String!
  hire_date: DateTime
  home_phone: String
  last_name: String!
  notes: String
  orders: ordersCreateManyWithoutEmployeesInput
  other_employees: employeesCreateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesCreateManyWithoutEmployeesInput {
  connect: [employeesWhereUniqueInput!]
  create: [employeesCreateWithoutEmployeesInput!]
}

input employeesCreateOneWithoutEmployeeterritoriesInput {
  connect: employeesWhereUniqueInput
  create: employeesCreateWithoutEmployeeterritoriesInput
}

input employeesCreateOneWithoutOrdersInput {
  connect: employeesWhereUniqueInput
  create: employeesCreateWithoutOrdersInput
}

input employeesCreateOneWithoutOther_employeesInput {
  connect: employeesWhereUniqueInput
  create: employeesCreateWithoutOther_employeesInput
}

input employeesCreateWithoutEmployeesInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int!
  employeeterritories: employeeterritoriesCreateManyWithoutEmployeesInput
  extension: String
  first_name: String!
  hire_date: DateTime
  home_phone: String
  last_name: String!
  notes: String
  orders: ordersCreateManyWithoutEmployeesInput
  other_employees: employeesCreateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesCreateWithoutEmployeeterritoriesInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int!
  employees: employeesCreateOneWithoutOther_employeesInput
  extension: String
  first_name: String!
  hire_date: DateTime
  home_phone: String
  last_name: String!
  notes: String
  orders: ordersCreateManyWithoutEmployeesInput
  other_employees: employeesCreateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesCreateWithoutOrdersInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int!
  employees: employeesCreateOneWithoutOther_employeesInput
  employeeterritories: employeeterritoriesCreateManyWithoutEmployeesInput
  extension: String
  first_name: String!
  hire_date: DateTime
  home_phone: String
  last_name: String!
  notes: String
  other_employees: employeesCreateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesCreateWithoutOther_employeesInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int!
  employees: employeesCreateOneWithoutOther_employeesInput
  employeeterritories: employeeterritoriesCreateManyWithoutEmployeesInput
  extension: String
  first_name: String!
  hire_date: DateTime
  home_phone: String
  last_name: String!
  notes: String
  orders: ordersCreateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesFilter {
  every: employeesWhereInput
  none: employeesWhereInput
  some: employeesWhereInput
}

input employeesOrderByInput {
  address: OrderByArg
  birth_date: OrderByArg
  city: OrderByArg
  country: OrderByArg
  employee_id: OrderByArg
  extension: OrderByArg
  first_name: OrderByArg
  hire_date: OrderByArg
  home_phone: OrderByArg
  last_name: OrderByArg
  notes: OrderByArg
  photo_path: OrderByArg
  postal_code: OrderByArg
  region: OrderByArg
  reports_to: OrderByArg
  title: OrderByArg
  title_of_courtesy: OrderByArg
}

input employeesScalarWhereInput {
  address: NullableStringFilter
  AND: [employeesScalarWhereInput!]
  birth_date: NullableDateTimeFilter
  city: NullableStringFilter
  country: NullableStringFilter
  employee_id: IntFilter
  employeeterritories: employeeterritoriesFilter
  extension: NullableStringFilter
  first_name: StringFilter
  hire_date: NullableDateTimeFilter
  home_phone: NullableStringFilter
  last_name: StringFilter
  NOT: [employeesScalarWhereInput!]
  notes: NullableStringFilter
  OR: [employeesScalarWhereInput!]
  orders: ordersFilter
  other_employees: employeesFilter
  photo_path: NullableStringFilter
  postal_code: NullableStringFilter
  region: NullableStringFilter
  reports_to: NullableIntFilter
  title: NullableStringFilter
  title_of_courtesy: NullableStringFilter
}

input employeesUpdateInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int
  employees: employeesUpdateOneWithoutOther_employeesInput
  employeeterritories: employeeterritoriesUpdateManyWithoutEmployeesInput
  extension: String
  first_name: String
  hire_date: DateTime
  home_phone: String
  last_name: String
  notes: String
  orders: ordersUpdateManyWithoutEmployeesInput
  other_employees: employeesUpdateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesUpdateManyDataInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int
  extension: String
  first_name: String
  hire_date: DateTime
  home_phone: String
  last_name: String
  notes: String
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesUpdateManyMutationInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int
  extension: String
  first_name: String
  hire_date: DateTime
  home_phone: String
  last_name: String
  notes: String
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesUpdateManyWithoutEmployeesInput {
  connect: [employeesWhereUniqueInput!]
  create: [employeesCreateWithoutEmployeesInput!]
  delete: [employeesWhereUniqueInput!]
  deleteMany: [employeesScalarWhereInput!]
  disconnect: [employeesWhereUniqueInput!]
  set: [employeesWhereUniqueInput!]
  update: [employeesUpdateWithWhereUniqueWithoutEmployeesInput!]
  updateMany: [employeesUpdateManyWithWhereNestedInput!]
  upsert: [employeesUpsertWithWhereUniqueWithoutEmployeesInput!]
}

input employeesUpdateManyWithWhereNestedInput {
  data: employeesUpdateManyDataInput!
  where: employeesScalarWhereInput!
}

input employeesUpdateOneRequiredWithoutEmployeeterritoriesInput {
  connect: employeesWhereUniqueInput
  create: employeesCreateWithoutEmployeeterritoriesInput
  update: employeesUpdateWithoutEmployeeterritoriesDataInput
  upsert: employeesUpsertWithoutEmployeeterritoriesInput
}

input employeesUpdateOneWithoutOrdersInput {
  connect: employeesWhereUniqueInput
  create: employeesCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: employeesUpdateWithoutOrdersDataInput
  upsert: employeesUpsertWithoutOrdersInput
}

input employeesUpdateOneWithoutOther_employeesInput {
  connect: employeesWhereUniqueInput
  create: employeesCreateWithoutOther_employeesInput
  delete: Boolean
  disconnect: Boolean
  update: employeesUpdateWithoutOther_employeesDataInput
  upsert: employeesUpsertWithoutOther_employeesInput
}

input employeesUpdateWithoutEmployeesDataInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int
  employeeterritories: employeeterritoriesUpdateManyWithoutEmployeesInput
  extension: String
  first_name: String
  hire_date: DateTime
  home_phone: String
  last_name: String
  notes: String
  orders: ordersUpdateManyWithoutEmployeesInput
  other_employees: employeesUpdateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesUpdateWithoutEmployeeterritoriesDataInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int
  employees: employeesUpdateOneWithoutOther_employeesInput
  extension: String
  first_name: String
  hire_date: DateTime
  home_phone: String
  last_name: String
  notes: String
  orders: ordersUpdateManyWithoutEmployeesInput
  other_employees: employeesUpdateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesUpdateWithoutOrdersDataInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int
  employees: employeesUpdateOneWithoutOther_employeesInput
  employeeterritories: employeeterritoriesUpdateManyWithoutEmployeesInput
  extension: String
  first_name: String
  hire_date: DateTime
  home_phone: String
  last_name: String
  notes: String
  other_employees: employeesUpdateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesUpdateWithoutOther_employeesDataInput {
  address: String
  birth_date: DateTime
  city: String
  country: String
  employee_id: Int
  employees: employeesUpdateOneWithoutOther_employeesInput
  employeeterritories: employeeterritoriesUpdateManyWithoutEmployeesInput
  extension: String
  first_name: String
  hire_date: DateTime
  home_phone: String
  last_name: String
  notes: String
  orders: ordersUpdateManyWithoutEmployeesInput
  photo_path: String
  postal_code: String
  region: String
  title: String
  title_of_courtesy: String
}

input employeesUpdateWithWhereUniqueWithoutEmployeesInput {
  data: employeesUpdateWithoutEmployeesDataInput!
  where: employeesWhereUniqueInput!
}

input employeesUpsertWithoutEmployeeterritoriesInput {
  create: employeesCreateWithoutEmployeeterritoriesInput!
  update: employeesUpdateWithoutEmployeeterritoriesDataInput!
}

input employeesUpsertWithoutOrdersInput {
  create: employeesCreateWithoutOrdersInput!
  update: employeesUpdateWithoutOrdersDataInput!
}

input employeesUpsertWithoutOther_employeesInput {
  create: employeesCreateWithoutOther_employeesInput!
  update: employeesUpdateWithoutOther_employeesDataInput!
}

input employeesUpsertWithWhereUniqueWithoutEmployeesInput {
  create: employeesCreateWithoutEmployeesInput!
  update: employeesUpdateWithoutEmployeesDataInput!
  where: employeesWhereUniqueInput!
}

input employeesWhereInput {
  address: NullableStringFilter
  AND: [employeesWhereInput!]
  birth_date: NullableDateTimeFilter
  city: NullableStringFilter
  country: NullableStringFilter
  employee_id: IntFilter
  employees: employeesWhereInput
  employeeterritories: employeeterritoriesFilter
  extension: NullableStringFilter
  first_name: StringFilter
  hire_date: NullableDateTimeFilter
  home_phone: NullableStringFilter
  last_name: StringFilter
  NOT: [employeesWhereInput!]
  notes: NullableStringFilter
  OR: [employeesWhereInput!]
  orders: ordersFilter
  other_employees: employeesFilter
  photo_path: NullableStringFilter
  postal_code: NullableStringFilter
  region: NullableStringFilter
  reports_to: NullableIntFilter
  title: NullableStringFilter
  title_of_courtesy: NullableStringFilter
}

input employeesWhereUniqueInput {
  employee_id: Int
}

type employeeterritories {
  desc: String!
  employee_id: Int!
  employees: employees!
  territories: territories!
  territory_id: String!
}

input employeeterritoriesCreateInput {
  desc: String!
  employees: employeesCreateOneWithoutEmployeeterritoriesInput!
  territories: territoriesCreateOneWithoutEmployeeterritoriesInput!
}

input employeeterritoriesCreateManyWithoutEmployeesInput {
  connect: [employeeterritoriesWhereUniqueInput!]
  create: [employeeterritoriesCreateWithoutEmployeesInput!]
}

input employeeterritoriesCreateManyWithoutTerritoriesInput {
  connect: [employeeterritoriesWhereUniqueInput!]
  create: [employeeterritoriesCreateWithoutTerritoriesInput!]
}

input employeeterritoriesCreateWithoutEmployeesInput {
  desc: String!
  territories: territoriesCreateOneWithoutEmployeeterritoriesInput!
}

input employeeterritoriesCreateWithoutTerritoriesInput {
  desc: String!
  employees: employeesCreateOneWithoutEmployeeterritoriesInput!
}

input employeeterritoriesFilter {
  every: employeeterritoriesWhereInput
  none: employeeterritoriesWhereInput
  some: employeeterritoriesWhereInput
}

input employeeterritoriesOrderByInput {
  desc: OrderByArg
  employee_id: OrderByArg
  territory_id: OrderByArg
}

input employeeterritoriesScalarWhereInput {
  AND: [employeeterritoriesScalarWhereInput!]
  desc: StringFilter
  employee_id: IntFilter
  NOT: [employeeterritoriesScalarWhereInput!]
  OR: [employeeterritoriesScalarWhereInput!]
  territory_id: StringFilter
}

input employeeterritoriesUpdateInput {
  desc: String
  employees: employeesUpdateOneRequiredWithoutEmployeeterritoriesInput
  territories: territoriesUpdateOneRequiredWithoutEmployeeterritoriesInput
}

input employeeterritoriesUpdateManyDataInput {
  desc: String
}

input employeeterritoriesUpdateManyMutationInput {
  desc: String
}

input employeeterritoriesUpdateManyWithoutEmployeesInput {
  connect: [employeeterritoriesWhereUniqueInput!]
  create: [employeeterritoriesCreateWithoutEmployeesInput!]
  delete: [employeeterritoriesWhereUniqueInput!]
  deleteMany: [employeeterritoriesScalarWhereInput!]
  disconnect: [employeeterritoriesWhereUniqueInput!]
  set: [employeeterritoriesWhereUniqueInput!]
  update: [employeeterritoriesUpdateWithWhereUniqueWithoutEmployeesInput!]
  updateMany: [employeeterritoriesUpdateManyWithWhereNestedInput!]
  upsert: [employeeterritoriesUpsertWithWhereUniqueWithoutEmployeesInput!]
}

input employeeterritoriesUpdateManyWithoutTerritoriesInput {
  connect: [employeeterritoriesWhereUniqueInput!]
  create: [employeeterritoriesCreateWithoutTerritoriesInput!]
  delete: [employeeterritoriesWhereUniqueInput!]
  deleteMany: [employeeterritoriesScalarWhereInput!]
  disconnect: [employeeterritoriesWhereUniqueInput!]
  set: [employeeterritoriesWhereUniqueInput!]
  update: [employeeterritoriesUpdateWithWhereUniqueWithoutTerritoriesInput!]
  updateMany: [employeeterritoriesUpdateManyWithWhereNestedInput!]
  upsert: [employeeterritoriesUpsertWithWhereUniqueWithoutTerritoriesInput!]
}

input employeeterritoriesUpdateManyWithWhereNestedInput {
  data: employeeterritoriesUpdateManyDataInput!
  where: employeeterritoriesScalarWhereInput!
}

input employeeterritoriesUpdateWithoutEmployeesDataInput {
  desc: String
  territories: territoriesUpdateOneRequiredWithoutEmployeeterritoriesInput
}

input employeeterritoriesUpdateWithoutTerritoriesDataInput {
  desc: String
  employees: employeesUpdateOneRequiredWithoutEmployeeterritoriesInput
}

input employeeterritoriesUpdateWithWhereUniqueWithoutEmployeesInput {
  data: employeeterritoriesUpdateWithoutEmployeesDataInput!
  where: employeeterritoriesWhereUniqueInput!
}

input employeeterritoriesUpdateWithWhereUniqueWithoutTerritoriesInput {
  data: employeeterritoriesUpdateWithoutTerritoriesDataInput!
  where: employeeterritoriesWhereUniqueInput!
}

input employeeterritoriesUpsertWithWhereUniqueWithoutEmployeesInput {
  create: employeeterritoriesCreateWithoutEmployeesInput!
  update: employeeterritoriesUpdateWithoutEmployeesDataInput!
  where: employeeterritoriesWhereUniqueInput!
}

input employeeterritoriesUpsertWithWhereUniqueWithoutTerritoriesInput {
  create: employeeterritoriesCreateWithoutTerritoriesInput!
  update: employeeterritoriesUpdateWithoutTerritoriesDataInput!
  where: employeeterritoriesWhereUniqueInput!
}

input employeeterritoriesWhereInput {
  AND: [employeeterritoriesWhereInput!]
  desc: StringFilter
  employee_id: IntFilter
  employees: employeesWhereInput
  NOT: [employeeterritoriesWhereInput!]
  OR: [employeeterritoriesWhereInput!]
  territories: territoriesWhereInput
  territory_id: StringFilter
}

input employeeterritoriesWhereUniqueInput {
  employee_id_territory_id: Employee_idTerritory_idCompoundUniqueInput
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOnecategories(data: categoriesCreateInput!): categories!
  createOnecustomercustomerdemo(data: customercustomerdemoCreateInput!): customercustomerdemo!
  createOnecustomerdemographics(data: customerdemographicsCreateInput!): customerdemographics!
  createOnecustomers(data: customersCreateInput!): customers!
  createOneemployees(data: employeesCreateInput!): employees!
  createOneemployeeterritories(data: employeeterritoriesCreateInput!): employeeterritories!
  createOneorderdetails(data: orderdetailsCreateInput!): orderdetails!
  createOneorders(data: ordersCreateInput!): orders!
  createOneproducts(data: productsCreateInput!): products!
  createOneregion(data: regionCreateInput!): region!
  createOneshippers(data: shippersCreateInput!): shippers!
  createOnesuppliers(data: suppliersCreateInput!): suppliers!
  createOneterritories(data: territoriesCreateInput!): territories!
  createOneusstates(data: usstatesCreateInput!): usstates!
  deleteManycategories(where: categoriesWhereInput): BatchPayload!
  deleteManycustomercustomerdemo(where: customercustomerdemoWhereInput): BatchPayload!
  deleteManycustomerdemographics(where: customerdemographicsWhereInput): BatchPayload!
  deleteManycustomers(where: customersWhereInput): BatchPayload!
  deleteManyemployees(where: employeesWhereInput): BatchPayload!
  deleteManyemployeeterritories(where: employeeterritoriesWhereInput): BatchPayload!
  deleteManyorderdetails(where: orderdetailsWhereInput): BatchPayload!
  deleteManyorders(where: ordersWhereInput): BatchPayload!
  deleteManyproducts(where: productsWhereInput): BatchPayload!
  deleteManyregion(where: regionWhereInput): BatchPayload!
  deleteManyshippers(where: shippersWhereInput): BatchPayload!
  deleteManysuppliers(where: suppliersWhereInput): BatchPayload!
  deleteManyterritories(where: territoriesWhereInput): BatchPayload!
  deleteManyusstates(where: usstatesWhereInput): BatchPayload!
  deleteOnecategories(where: categoriesWhereUniqueInput!): categories
  deleteOnecustomercustomerdemo(where: customercustomerdemoWhereUniqueInput!): customercustomerdemo
  deleteOnecustomerdemographics(where: customerdemographicsWhereUniqueInput!): customerdemographics
  deleteOnecustomers(where: customersWhereUniqueInput!): customers
  deleteOneemployees(where: employeesWhereUniqueInput!): employees
  deleteOneemployeeterritories(where: employeeterritoriesWhereUniqueInput!): employeeterritories
  deleteOneorderdetails(where: orderdetailsWhereUniqueInput!): orderdetails
  deleteOneorders(where: ordersWhereUniqueInput!): orders
  deleteOneproducts(where: productsWhereUniqueInput!): products
  deleteOneregion(where: regionWhereUniqueInput!): region
  deleteOneshippers(where: shippersWhereUniqueInput!): shippers
  deleteOnesuppliers(where: suppliersWhereUniqueInput!): suppliers
  deleteOneterritories(where: territoriesWhereUniqueInput!): territories
  deleteOneusstates(where: usstatesWhereUniqueInput!): usstates
  updateManycategories(data: categoriesUpdateManyMutationInput!, where: categoriesWhereInput): BatchPayload!
  updateManycustomercustomerdemo(data: customercustomerdemoUpdateManyMutationInput!, where: customercustomerdemoWhereInput): BatchPayload!
  updateManycustomerdemographics(data: customerdemographicsUpdateManyMutationInput!, where: customerdemographicsWhereInput): BatchPayload!
  updateManycustomers(data: customersUpdateManyMutationInput!, where: customersWhereInput): BatchPayload!
  updateManyemployees(data: employeesUpdateManyMutationInput!, where: employeesWhereInput): BatchPayload!
  updateManyemployeeterritories(data: employeeterritoriesUpdateManyMutationInput!, where: employeeterritoriesWhereInput): BatchPayload!
  updateManyorderdetails(data: orderdetailsUpdateManyMutationInput!, where: orderdetailsWhereInput): BatchPayload!
  updateManyorders(data: ordersUpdateManyMutationInput!, where: ordersWhereInput): BatchPayload!
  updateManyproducts(data: productsUpdateManyMutationInput!, where: productsWhereInput): BatchPayload!
  updateManyregion(data: regionUpdateManyMutationInput!, where: regionWhereInput): BatchPayload!
  updateManyshippers(data: shippersUpdateManyMutationInput!, where: shippersWhereInput): BatchPayload!
  updateManysuppliers(data: suppliersUpdateManyMutationInput!, where: suppliersWhereInput): BatchPayload!
  updateManyterritories(data: territoriesUpdateManyMutationInput!, where: territoriesWhereInput): BatchPayload!
  updateManyusstates(data: usstatesUpdateManyMutationInput!, where: usstatesWhereInput): BatchPayload!
  updateOnecategories(data: categoriesUpdateInput!, where: categoriesWhereUniqueInput!): categories
  updateOnecustomercustomerdemo(data: customercustomerdemoUpdateInput!, where: customercustomerdemoWhereUniqueInput!): customercustomerdemo
  updateOnecustomerdemographics(data: customerdemographicsUpdateInput!, where: customerdemographicsWhereUniqueInput!): customerdemographics
  updateOnecustomers(data: customersUpdateInput!, where: customersWhereUniqueInput!): customers
  updateOneemployees(data: employeesUpdateInput!, where: employeesWhereUniqueInput!): employees
  updateOneemployeeterritories(data: employeeterritoriesUpdateInput!, where: employeeterritoriesWhereUniqueInput!): employeeterritories
  updateOneorderdetails(data: orderdetailsUpdateInput!, where: orderdetailsWhereUniqueInput!): orderdetails
  updateOneorders(data: ordersUpdateInput!, where: ordersWhereUniqueInput!): orders
  updateOneproducts(data: productsUpdateInput!, where: productsWhereUniqueInput!): products
  updateOneregion(data: regionUpdateInput!, where: regionWhereUniqueInput!): region
  updateOneshippers(data: shippersUpdateInput!, where: shippersWhereUniqueInput!): shippers
  updateOnesuppliers(data: suppliersUpdateInput!, where: suppliersWhereUniqueInput!): suppliers
  updateOneterritories(data: territoriesUpdateInput!, where: territoriesWhereUniqueInput!): territories
  updateOneusstates(data: usstatesUpdateInput!, where: usstatesWhereUniqueInput!): usstates
  upsertOnecategories(create: categoriesCreateInput!, update: categoriesUpdateInput!, where: categoriesWhereUniqueInput!): categories!
  upsertOnecustomercustomerdemo(create: customercustomerdemoCreateInput!, update: customercustomerdemoUpdateInput!, where: customercustomerdemoWhereUniqueInput!): customercustomerdemo!
  upsertOnecustomerdemographics(create: customerdemographicsCreateInput!, update: customerdemographicsUpdateInput!, where: customerdemographicsWhereUniqueInput!): customerdemographics!
  upsertOnecustomers(create: customersCreateInput!, update: customersUpdateInput!, where: customersWhereUniqueInput!): customers!
  upsertOneemployees(create: employeesCreateInput!, update: employeesUpdateInput!, where: employeesWhereUniqueInput!): employees!
  upsertOneemployeeterritories(create: employeeterritoriesCreateInput!, update: employeeterritoriesUpdateInput!, where: employeeterritoriesWhereUniqueInput!): employeeterritories!
  upsertOneorderdetails(create: orderdetailsCreateInput!, update: orderdetailsUpdateInput!, where: orderdetailsWhereUniqueInput!): orderdetails!
  upsertOneorders(create: ordersCreateInput!, update: ordersUpdateInput!, where: ordersWhereUniqueInput!): orders!
  upsertOneproducts(create: productsCreateInput!, update: productsUpdateInput!, where: productsWhereUniqueInput!): products!
  upsertOneregion(create: regionCreateInput!, update: regionUpdateInput!, where: regionWhereUniqueInput!): region!
  upsertOneshippers(create: shippersCreateInput!, update: shippersUpdateInput!, where: shippersWhereUniqueInput!): shippers!
  upsertOnesuppliers(create: suppliersCreateInput!, update: suppliersUpdateInput!, where: suppliersWhereUniqueInput!): suppliers!
  upsertOneterritories(create: territoriesCreateInput!, update: territoriesUpdateInput!, where: territoriesWhereUniqueInput!): territories!
  upsertOneusstates(create: usstatesCreateInput!, update: usstatesUpdateInput!, where: usstatesWhereUniqueInput!): usstates!
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

input Order_idProduct_idCompoundUniqueInput {
  order_id: Int!
  product_id: Int!
}

enum OrderByArg {
  asc
  desc
}

type orderdetails {
  discount: Float!
  order_id: Int!
  orders: orders!
  product_id: Int!
  products: products!
  quantity: Int!
  unit_price: Float!
}

input orderdetailsCreateInput {
  discount: Float!
  orders: ordersCreateOneWithoutOrderdetailsInput!
  products: productsCreateOneWithoutOrderdetailsInput!
  quantity: Int!
  unit_price: Float!
}

input orderdetailsCreateManyWithoutOrdersInput {
  connect: [orderdetailsWhereUniqueInput!]
  create: [orderdetailsCreateWithoutOrdersInput!]
}

input orderdetailsCreateManyWithoutProductsInput {
  connect: [orderdetailsWhereUniqueInput!]
  create: [orderdetailsCreateWithoutProductsInput!]
}

input orderdetailsCreateWithoutOrdersInput {
  discount: Float!
  products: productsCreateOneWithoutOrderdetailsInput!
  quantity: Int!
  unit_price: Float!
}

input orderdetailsCreateWithoutProductsInput {
  discount: Float!
  orders: ordersCreateOneWithoutOrderdetailsInput!
  quantity: Int!
  unit_price: Float!
}

input orderdetailsFilter {
  every: orderdetailsWhereInput
  none: orderdetailsWhereInput
  some: orderdetailsWhereInput
}

input orderdetailsOrderByInput {
  discount: OrderByArg
  order_id: OrderByArg
  product_id: OrderByArg
  quantity: OrderByArg
  unit_price: OrderByArg
}

input orderdetailsScalarWhereInput {
  AND: [orderdetailsScalarWhereInput!]
  discount: FloatFilter
  NOT: [orderdetailsScalarWhereInput!]
  OR: [orderdetailsScalarWhereInput!]
  order_id: IntFilter
  product_id: IntFilter
  quantity: IntFilter
  unit_price: FloatFilter
}

input orderdetailsUpdateInput {
  discount: Float
  orders: ordersUpdateOneRequiredWithoutOrderdetailsInput
  products: productsUpdateOneRequiredWithoutOrderdetailsInput
  quantity: Int
  unit_price: Float
}

input orderdetailsUpdateManyDataInput {
  discount: Float
  quantity: Int
  unit_price: Float
}

input orderdetailsUpdateManyMutationInput {
  discount: Float
  quantity: Int
  unit_price: Float
}

input orderdetailsUpdateManyWithoutOrdersInput {
  connect: [orderdetailsWhereUniqueInput!]
  create: [orderdetailsCreateWithoutOrdersInput!]
  delete: [orderdetailsWhereUniqueInput!]
  deleteMany: [orderdetailsScalarWhereInput!]
  disconnect: [orderdetailsWhereUniqueInput!]
  set: [orderdetailsWhereUniqueInput!]
  update: [orderdetailsUpdateWithWhereUniqueWithoutOrdersInput!]
  updateMany: [orderdetailsUpdateManyWithWhereNestedInput!]
  upsert: [orderdetailsUpsertWithWhereUniqueWithoutOrdersInput!]
}

input orderdetailsUpdateManyWithoutProductsInput {
  connect: [orderdetailsWhereUniqueInput!]
  create: [orderdetailsCreateWithoutProductsInput!]
  delete: [orderdetailsWhereUniqueInput!]
  deleteMany: [orderdetailsScalarWhereInput!]
  disconnect: [orderdetailsWhereUniqueInput!]
  set: [orderdetailsWhereUniqueInput!]
  update: [orderdetailsUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [orderdetailsUpdateManyWithWhereNestedInput!]
  upsert: [orderdetailsUpsertWithWhereUniqueWithoutProductsInput!]
}

input orderdetailsUpdateManyWithWhereNestedInput {
  data: orderdetailsUpdateManyDataInput!
  where: orderdetailsScalarWhereInput!
}

input orderdetailsUpdateWithoutOrdersDataInput {
  discount: Float
  products: productsUpdateOneRequiredWithoutOrderdetailsInput
  quantity: Int
  unit_price: Float
}

input orderdetailsUpdateWithoutProductsDataInput {
  discount: Float
  orders: ordersUpdateOneRequiredWithoutOrderdetailsInput
  quantity: Int
  unit_price: Float
}

input orderdetailsUpdateWithWhereUniqueWithoutOrdersInput {
  data: orderdetailsUpdateWithoutOrdersDataInput!
  where: orderdetailsWhereUniqueInput!
}

input orderdetailsUpdateWithWhereUniqueWithoutProductsInput {
  data: orderdetailsUpdateWithoutProductsDataInput!
  where: orderdetailsWhereUniqueInput!
}

input orderdetailsUpsertWithWhereUniqueWithoutOrdersInput {
  create: orderdetailsCreateWithoutOrdersInput!
  update: orderdetailsUpdateWithoutOrdersDataInput!
  where: orderdetailsWhereUniqueInput!
}

input orderdetailsUpsertWithWhereUniqueWithoutProductsInput {
  create: orderdetailsCreateWithoutProductsInput!
  update: orderdetailsUpdateWithoutProductsDataInput!
  where: orderdetailsWhereUniqueInput!
}

input orderdetailsWhereInput {
  AND: [orderdetailsWhereInput!]
  discount: FloatFilter
  NOT: [orderdetailsWhereInput!]
  OR: [orderdetailsWhereInput!]
  order_id: IntFilter
  orders: ordersWhereInput
  product_id: IntFilter
  products: productsWhereInput
  quantity: IntFilter
  unit_price: FloatFilter
}

input orderdetailsWhereUniqueInput {
  order_id_product_id: Order_idProduct_idCompoundUniqueInput
}

type orders {
  customer_id: String
  customers: customers
  employee_id: Int
  employees: employees
  freight: Float
  order_date: DateTime
  order_id: Int!
  orderdetails(after: orderdetailsWhereUniqueInput, before: orderdetailsWhereUniqueInput, first: Int, last: Int): [orderdetails!]!
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  ship_via: Int
  shipped_date: DateTime
  shippers: shippers
}

input ordersCreateInput {
  customers: customersCreateOneWithoutOrdersInput
  employees: employeesCreateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int!
  orderdetails: orderdetailsCreateManyWithoutOrdersInput
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
  shippers: shippersCreateOneWithoutOrdersInput
}

input ordersCreateManyWithoutCustomersInput {
  connect: [ordersWhereUniqueInput!]
  create: [ordersCreateWithoutCustomersInput!]
}

input ordersCreateManyWithoutEmployeesInput {
  connect: [ordersWhereUniqueInput!]
  create: [ordersCreateWithoutEmployeesInput!]
}

input ordersCreateManyWithoutShippersInput {
  connect: [ordersWhereUniqueInput!]
  create: [ordersCreateWithoutShippersInput!]
}

input ordersCreateOneWithoutOrderdetailsInput {
  connect: ordersWhereUniqueInput
  create: ordersCreateWithoutOrderdetailsInput
}

input ordersCreateWithoutCustomersInput {
  employees: employeesCreateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int!
  orderdetails: orderdetailsCreateManyWithoutOrdersInput
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
  shippers: shippersCreateOneWithoutOrdersInput
}

input ordersCreateWithoutEmployeesInput {
  customers: customersCreateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int!
  orderdetails: orderdetailsCreateManyWithoutOrdersInput
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
  shippers: shippersCreateOneWithoutOrdersInput
}

input ordersCreateWithoutOrderdetailsInput {
  customers: customersCreateOneWithoutOrdersInput
  employees: employeesCreateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int!
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
  shippers: shippersCreateOneWithoutOrdersInput
}

input ordersCreateWithoutShippersInput {
  customers: customersCreateOneWithoutOrdersInput
  employees: employeesCreateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int!
  orderdetails: orderdetailsCreateManyWithoutOrdersInput
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
}

input ordersFilter {
  every: ordersWhereInput
  none: ordersWhereInput
  some: ordersWhereInput
}

input ordersOrderByInput {
  customer_id: OrderByArg
  employee_id: OrderByArg
  freight: OrderByArg
  order_date: OrderByArg
  order_id: OrderByArg
  required_date: OrderByArg
  ship_address: OrderByArg
  ship_city: OrderByArg
  ship_country: OrderByArg
  ship_name: OrderByArg
  ship_postal_code: OrderByArg
  ship_region: OrderByArg
  ship_via: OrderByArg
  shipped_date: OrderByArg
}

input ordersScalarWhereInput {
  AND: [ordersScalarWhereInput!]
  customer_id: NullableStringFilter
  employee_id: NullableIntFilter
  freight: NullableFloatFilter
  NOT: [ordersScalarWhereInput!]
  OR: [ordersScalarWhereInput!]
  order_date: NullableDateTimeFilter
  order_id: IntFilter
  orderdetails: orderdetailsFilter
  required_date: NullableDateTimeFilter
  ship_address: NullableStringFilter
  ship_city: NullableStringFilter
  ship_country: NullableStringFilter
  ship_name: NullableStringFilter
  ship_postal_code: NullableStringFilter
  ship_region: NullableStringFilter
  ship_via: NullableIntFilter
  shipped_date: NullableDateTimeFilter
}

input ordersUpdateInput {
  customers: customersUpdateOneWithoutOrdersInput
  employees: employeesUpdateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int
  orderdetails: orderdetailsUpdateManyWithoutOrdersInput
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
  shippers: shippersUpdateOneWithoutOrdersInput
}

input ordersUpdateManyDataInput {
  freight: Float
  order_date: DateTime
  order_id: Int
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
}

input ordersUpdateManyMutationInput {
  freight: Float
  order_date: DateTime
  order_id: Int
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
}

input ordersUpdateManyWithoutCustomersInput {
  connect: [ordersWhereUniqueInput!]
  create: [ordersCreateWithoutCustomersInput!]
  delete: [ordersWhereUniqueInput!]
  deleteMany: [ordersScalarWhereInput!]
  disconnect: [ordersWhereUniqueInput!]
  set: [ordersWhereUniqueInput!]
  update: [ordersUpdateWithWhereUniqueWithoutCustomersInput!]
  updateMany: [ordersUpdateManyWithWhereNestedInput!]
  upsert: [ordersUpsertWithWhereUniqueWithoutCustomersInput!]
}

input ordersUpdateManyWithoutEmployeesInput {
  connect: [ordersWhereUniqueInput!]
  create: [ordersCreateWithoutEmployeesInput!]
  delete: [ordersWhereUniqueInput!]
  deleteMany: [ordersScalarWhereInput!]
  disconnect: [ordersWhereUniqueInput!]
  set: [ordersWhereUniqueInput!]
  update: [ordersUpdateWithWhereUniqueWithoutEmployeesInput!]
  updateMany: [ordersUpdateManyWithWhereNestedInput!]
  upsert: [ordersUpsertWithWhereUniqueWithoutEmployeesInput!]
}

input ordersUpdateManyWithoutShippersInput {
  connect: [ordersWhereUniqueInput!]
  create: [ordersCreateWithoutShippersInput!]
  delete: [ordersWhereUniqueInput!]
  deleteMany: [ordersScalarWhereInput!]
  disconnect: [ordersWhereUniqueInput!]
  set: [ordersWhereUniqueInput!]
  update: [ordersUpdateWithWhereUniqueWithoutShippersInput!]
  updateMany: [ordersUpdateManyWithWhereNestedInput!]
  upsert: [ordersUpsertWithWhereUniqueWithoutShippersInput!]
}

input ordersUpdateManyWithWhereNestedInput {
  data: ordersUpdateManyDataInput!
  where: ordersScalarWhereInput!
}

input ordersUpdateOneRequiredWithoutOrderdetailsInput {
  connect: ordersWhereUniqueInput
  create: ordersCreateWithoutOrderdetailsInput
  update: ordersUpdateWithoutOrderdetailsDataInput
  upsert: ordersUpsertWithoutOrderdetailsInput
}

input ordersUpdateWithoutCustomersDataInput {
  employees: employeesUpdateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int
  orderdetails: orderdetailsUpdateManyWithoutOrdersInput
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
  shippers: shippersUpdateOneWithoutOrdersInput
}

input ordersUpdateWithoutEmployeesDataInput {
  customers: customersUpdateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int
  orderdetails: orderdetailsUpdateManyWithoutOrdersInput
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
  shippers: shippersUpdateOneWithoutOrdersInput
}

input ordersUpdateWithoutOrderdetailsDataInput {
  customers: customersUpdateOneWithoutOrdersInput
  employees: employeesUpdateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
  shippers: shippersUpdateOneWithoutOrdersInput
}

input ordersUpdateWithoutShippersDataInput {
  customers: customersUpdateOneWithoutOrdersInput
  employees: employeesUpdateOneWithoutOrdersInput
  freight: Float
  order_date: DateTime
  order_id: Int
  orderdetails: orderdetailsUpdateManyWithoutOrdersInput
  required_date: DateTime
  ship_address: String
  ship_city: String
  ship_country: String
  ship_name: String
  ship_postal_code: String
  ship_region: String
  shipped_date: DateTime
}

input ordersUpdateWithWhereUniqueWithoutCustomersInput {
  data: ordersUpdateWithoutCustomersDataInput!
  where: ordersWhereUniqueInput!
}

input ordersUpdateWithWhereUniqueWithoutEmployeesInput {
  data: ordersUpdateWithoutEmployeesDataInput!
  where: ordersWhereUniqueInput!
}

input ordersUpdateWithWhereUniqueWithoutShippersInput {
  data: ordersUpdateWithoutShippersDataInput!
  where: ordersWhereUniqueInput!
}

input ordersUpsertWithoutOrderdetailsInput {
  create: ordersCreateWithoutOrderdetailsInput!
  update: ordersUpdateWithoutOrderdetailsDataInput!
}

input ordersUpsertWithWhereUniqueWithoutCustomersInput {
  create: ordersCreateWithoutCustomersInput!
  update: ordersUpdateWithoutCustomersDataInput!
  where: ordersWhereUniqueInput!
}

input ordersUpsertWithWhereUniqueWithoutEmployeesInput {
  create: ordersCreateWithoutEmployeesInput!
  update: ordersUpdateWithoutEmployeesDataInput!
  where: ordersWhereUniqueInput!
}

input ordersUpsertWithWhereUniqueWithoutShippersInput {
  create: ordersCreateWithoutShippersInput!
  update: ordersUpdateWithoutShippersDataInput!
  where: ordersWhereUniqueInput!
}

input ordersWhereInput {
  AND: [ordersWhereInput!]
  customer_id: NullableStringFilter
  customers: customersWhereInput
  employee_id: NullableIntFilter
  employees: employeesWhereInput
  freight: NullableFloatFilter
  NOT: [ordersWhereInput!]
  OR: [ordersWhereInput!]
  order_date: NullableDateTimeFilter
  order_id: IntFilter
  orderdetails: orderdetailsFilter
  required_date: NullableDateTimeFilter
  ship_address: NullableStringFilter
  ship_city: NullableStringFilter
  ship_country: NullableStringFilter
  ship_name: NullableStringFilter
  ship_postal_code: NullableStringFilter
  ship_region: NullableStringFilter
  ship_via: NullableIntFilter
  shipped_date: NullableDateTimeFilter
  shippers: shippersWhereInput
}

input ordersWhereUniqueInput {
  order_id: Int
}

type products {
  categories: categories
  category_id: Int
  discontinued: Int!
  orderdetails(after: orderdetailsWhereUniqueInput, before: orderdetailsWhereUniqueInput, first: Int, last: Int): [orderdetails!]!
  product_id: Int!
  product_name: String!
  quantity_per_unit: String
  reorder_level: Int
  supplier_id: Int
  suppliers: suppliers
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsCreateInput {
  categories: categoriesCreateOneWithoutProductsInput
  discontinued: Int!
  orderdetails: orderdetailsCreateManyWithoutProductsInput
  product_id: Int!
  product_name: String!
  quantity_per_unit: String
  reorder_level: Int
  suppliers: suppliersCreateOneWithoutProductsInput
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsCreateManyWithoutCategoriesInput {
  connect: [productsWhereUniqueInput!]
  create: [productsCreateWithoutCategoriesInput!]
}

input productsCreateManyWithoutSuppliersInput {
  connect: [productsWhereUniqueInput!]
  create: [productsCreateWithoutSuppliersInput!]
}

input productsCreateOneWithoutOrderdetailsInput {
  connect: productsWhereUniqueInput
  create: productsCreateWithoutOrderdetailsInput
}

input productsCreateWithoutCategoriesInput {
  discontinued: Int!
  orderdetails: orderdetailsCreateManyWithoutProductsInput
  product_id: Int!
  product_name: String!
  quantity_per_unit: String
  reorder_level: Int
  suppliers: suppliersCreateOneWithoutProductsInput
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsCreateWithoutOrderdetailsInput {
  categories: categoriesCreateOneWithoutProductsInput
  discontinued: Int!
  product_id: Int!
  product_name: String!
  quantity_per_unit: String
  reorder_level: Int
  suppliers: suppliersCreateOneWithoutProductsInput
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsCreateWithoutSuppliersInput {
  categories: categoriesCreateOneWithoutProductsInput
  discontinued: Int!
  orderdetails: orderdetailsCreateManyWithoutProductsInput
  product_id: Int!
  product_name: String!
  quantity_per_unit: String
  reorder_level: Int
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsFilter {
  every: productsWhereInput
  none: productsWhereInput
  some: productsWhereInput
}

input productsOrderByInput {
  category_id: OrderByArg
  discontinued: OrderByArg
  product_id: OrderByArg
  product_name: OrderByArg
  quantity_per_unit: OrderByArg
  reorder_level: OrderByArg
  supplier_id: OrderByArg
  unit_price: OrderByArg
  units_in_stock: OrderByArg
  units_on_order: OrderByArg
}

input productsScalarWhereInput {
  AND: [productsScalarWhereInput!]
  category_id: NullableIntFilter
  discontinued: IntFilter
  NOT: [productsScalarWhereInput!]
  OR: [productsScalarWhereInput!]
  orderdetails: orderdetailsFilter
  product_id: IntFilter
  product_name: StringFilter
  quantity_per_unit: NullableStringFilter
  reorder_level: NullableIntFilter
  supplier_id: NullableIntFilter
  unit_price: NullableFloatFilter
  units_in_stock: NullableIntFilter
  units_on_order: NullableIntFilter
}

input productsUpdateInput {
  categories: categoriesUpdateOneWithoutProductsInput
  discontinued: Int
  orderdetails: orderdetailsUpdateManyWithoutProductsInput
  product_id: Int
  product_name: String
  quantity_per_unit: String
  reorder_level: Int
  suppliers: suppliersUpdateOneWithoutProductsInput
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsUpdateManyDataInput {
  discontinued: Int
  product_id: Int
  product_name: String
  quantity_per_unit: String
  reorder_level: Int
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsUpdateManyMutationInput {
  discontinued: Int
  product_id: Int
  product_name: String
  quantity_per_unit: String
  reorder_level: Int
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsUpdateManyWithoutCategoriesInput {
  connect: [productsWhereUniqueInput!]
  create: [productsCreateWithoutCategoriesInput!]
  delete: [productsWhereUniqueInput!]
  deleteMany: [productsScalarWhereInput!]
  disconnect: [productsWhereUniqueInput!]
  set: [productsWhereUniqueInput!]
  update: [productsUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [productsUpdateManyWithWhereNestedInput!]
  upsert: [productsUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input productsUpdateManyWithoutSuppliersInput {
  connect: [productsWhereUniqueInput!]
  create: [productsCreateWithoutSuppliersInput!]
  delete: [productsWhereUniqueInput!]
  deleteMany: [productsScalarWhereInput!]
  disconnect: [productsWhereUniqueInput!]
  set: [productsWhereUniqueInput!]
  update: [productsUpdateWithWhereUniqueWithoutSuppliersInput!]
  updateMany: [productsUpdateManyWithWhereNestedInput!]
  upsert: [productsUpsertWithWhereUniqueWithoutSuppliersInput!]
}

input productsUpdateManyWithWhereNestedInput {
  data: productsUpdateManyDataInput!
  where: productsScalarWhereInput!
}

input productsUpdateOneRequiredWithoutOrderdetailsInput {
  connect: productsWhereUniqueInput
  create: productsCreateWithoutOrderdetailsInput
  update: productsUpdateWithoutOrderdetailsDataInput
  upsert: productsUpsertWithoutOrderdetailsInput
}

input productsUpdateWithoutCategoriesDataInput {
  discontinued: Int
  orderdetails: orderdetailsUpdateManyWithoutProductsInput
  product_id: Int
  product_name: String
  quantity_per_unit: String
  reorder_level: Int
  suppliers: suppliersUpdateOneWithoutProductsInput
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsUpdateWithoutOrderdetailsDataInput {
  categories: categoriesUpdateOneWithoutProductsInput
  discontinued: Int
  product_id: Int
  product_name: String
  quantity_per_unit: String
  reorder_level: Int
  suppliers: suppliersUpdateOneWithoutProductsInput
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsUpdateWithoutSuppliersDataInput {
  categories: categoriesUpdateOneWithoutProductsInput
  discontinued: Int
  orderdetails: orderdetailsUpdateManyWithoutProductsInput
  product_id: Int
  product_name: String
  quantity_per_unit: String
  reorder_level: Int
  unit_price: Float
  units_in_stock: Int
  units_on_order: Int
}

input productsUpdateWithWhereUniqueWithoutCategoriesInput {
  data: productsUpdateWithoutCategoriesDataInput!
  where: productsWhereUniqueInput!
}

input productsUpdateWithWhereUniqueWithoutSuppliersInput {
  data: productsUpdateWithoutSuppliersDataInput!
  where: productsWhereUniqueInput!
}

input productsUpsertWithoutOrderdetailsInput {
  create: productsCreateWithoutOrderdetailsInput!
  update: productsUpdateWithoutOrderdetailsDataInput!
}

input productsUpsertWithWhereUniqueWithoutCategoriesInput {
  create: productsCreateWithoutCategoriesInput!
  update: productsUpdateWithoutCategoriesDataInput!
  where: productsWhereUniqueInput!
}

input productsUpsertWithWhereUniqueWithoutSuppliersInput {
  create: productsCreateWithoutSuppliersInput!
  update: productsUpdateWithoutSuppliersDataInput!
  where: productsWhereUniqueInput!
}

input productsWhereInput {
  AND: [productsWhereInput!]
  categories: categoriesWhereInput
  category_id: NullableIntFilter
  discontinued: IntFilter
  NOT: [productsWhereInput!]
  OR: [productsWhereInput!]
  orderdetails: orderdetailsFilter
  product_id: IntFilter
  product_name: StringFilter
  quantity_per_unit: NullableStringFilter
  reorder_level: NullableIntFilter
  supplier_id: NullableIntFilter
  suppliers: suppliersWhereInput
  unit_price: NullableFloatFilter
  units_in_stock: NullableIntFilter
  units_on_order: NullableIntFilter
}

input productsWhereUniqueInput {
  product_id: Int
}

type Query {
  categories(after: categoriesWhereUniqueInput, before: categoriesWhereUniqueInput, first: Int, last: Int, orderBy: categoriesOrderByInput, where: categoriesWhereInput): [categories!]!
  customercustomerdemo(where: customercustomerdemoWhereUniqueInput!): customercustomerdemo
  customercustomerdemos(after: customercustomerdemoWhereUniqueInput, before: customercustomerdemoWhereUniqueInput, first: Int, last: Int, orderBy: customercustomerdemoOrderByInput, where: customercustomerdemoWhereInput): [customercustomerdemo!]!
  customerdemographics(after: customerdemographicsWhereUniqueInput, before: customerdemographicsWhereUniqueInput, first: Int, last: Int, orderBy: customerdemographicsOrderByInput, where: customerdemographicsWhereInput): [customerdemographics!]!
  customers(after: customersWhereUniqueInput, before: customersWhereUniqueInput, first: Int, last: Int, orderBy: customersOrderByInput, where: customersWhereInput): [customers!]!
  employees(after: employeesWhereUniqueInput, before: employeesWhereUniqueInput, first: Int, last: Int, orderBy: employeesOrderByInput, where: employeesWhereInput): [employees!]!
  employeeterritories(after: employeeterritoriesWhereUniqueInput, before: employeeterritoriesWhereUniqueInput, first: Int, last: Int, orderBy: employeeterritoriesOrderByInput, where: employeeterritoriesWhereInput): [employeeterritories!]!
  orderdetails(after: orderdetailsWhereUniqueInput, before: orderdetailsWhereUniqueInput, first: Int, last: Int, orderBy: orderdetailsOrderByInput, where: orderdetailsWhereInput): [orderdetails!]!
  orders(after: ordersWhereUniqueInput, before: ordersWhereUniqueInput, first: Int, last: Int, orderBy: ordersOrderByInput, where: ordersWhereInput): [orders!]!
  products(after: productsWhereUniqueInput, before: productsWhereUniqueInput, first: Int, last: Int, orderBy: productsOrderByInput, where: productsWhereInput): [products!]!
  region(where: regionWhereUniqueInput!): region
  regions(after: regionWhereUniqueInput, before: regionWhereUniqueInput, first: Int, last: Int, orderBy: regionOrderByInput, where: regionWhereInput): [region!]!
  shippers(after: shippersWhereUniqueInput, before: shippersWhereUniqueInput, first: Int, last: Int, orderBy: shippersOrderByInput, where: shippersWhereInput): [shippers!]!
  suppliers(after: suppliersWhereUniqueInput, before: suppliersWhereUniqueInput, first: Int, last: Int, orderBy: suppliersOrderByInput, where: suppliersWhereInput): [suppliers!]!
  territories(after: territoriesWhereUniqueInput, before: territoriesWhereUniqueInput, first: Int, last: Int, orderBy: territoriesOrderByInput, where: territoriesWhereInput): [territories!]!
  usstates(after: usstatesWhereUniqueInput, before: usstatesWhereUniqueInput, first: Int, last: Int, orderBy: usstatesOrderByInput, where: usstatesWhereInput): [usstates!]!
}

type region {
  region_description: String!
  region_id: Int!
  territories(after: territoriesWhereUniqueInput, before: territoriesWhereUniqueInput, first: Int, last: Int): [territories!]!
}

input regionCreateInput {
  region_description: String!
  region_id: Int!
  territories: territoriesCreateManyWithoutRegionInput
}

input regionCreateOneWithoutTerritoriesInput {
  connect: regionWhereUniqueInput
  create: regionCreateWithoutTerritoriesInput
}

input regionCreateWithoutTerritoriesInput {
  region_description: String!
  region_id: Int!
}

input regionOrderByInput {
  region_description: OrderByArg
  region_id: OrderByArg
}

input regionUpdateInput {
  region_description: String
  region_id: Int
  territories: territoriesUpdateManyWithoutRegionInput
}

input regionUpdateManyMutationInput {
  region_description: String
  region_id: Int
}

input regionUpdateOneRequiredWithoutTerritoriesInput {
  connect: regionWhereUniqueInput
  create: regionCreateWithoutTerritoriesInput
  update: regionUpdateWithoutTerritoriesDataInput
  upsert: regionUpsertWithoutTerritoriesInput
}

input regionUpdateWithoutTerritoriesDataInput {
  region_description: String
  region_id: Int
}

input regionUpsertWithoutTerritoriesInput {
  create: regionCreateWithoutTerritoriesInput!
  update: regionUpdateWithoutTerritoriesDataInput!
}

input regionWhereInput {
  AND: [regionWhereInput!]
  NOT: [regionWhereInput!]
  OR: [regionWhereInput!]
  region_description: StringFilter
  region_id: IntFilter
  territories: territoriesFilter
}

input regionWhereUniqueInput {
  region_id: Int
}

type shippers {
  company_name: String!
  orders(after: ordersWhereUniqueInput, before: ordersWhereUniqueInput, first: Int, last: Int): [orders!]!
  phone: String
  shipper_id: Int!
}

input shippersCreateInput {
  company_name: String!
  orders: ordersCreateManyWithoutShippersInput
  phone: String
  shipper_id: Int!
}

input shippersCreateOneWithoutOrdersInput {
  connect: shippersWhereUniqueInput
  create: shippersCreateWithoutOrdersInput
}

input shippersCreateWithoutOrdersInput {
  company_name: String!
  phone: String
  shipper_id: Int!
}

input shippersOrderByInput {
  company_name: OrderByArg
  phone: OrderByArg
  shipper_id: OrderByArg
}

input shippersUpdateInput {
  company_name: String
  orders: ordersUpdateManyWithoutShippersInput
  phone: String
  shipper_id: Int
}

input shippersUpdateManyMutationInput {
  company_name: String
  phone: String
  shipper_id: Int
}

input shippersUpdateOneWithoutOrdersInput {
  connect: shippersWhereUniqueInput
  create: shippersCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: shippersUpdateWithoutOrdersDataInput
  upsert: shippersUpsertWithoutOrdersInput
}

input shippersUpdateWithoutOrdersDataInput {
  company_name: String
  phone: String
  shipper_id: Int
}

input shippersUpsertWithoutOrdersInput {
  create: shippersCreateWithoutOrdersInput!
  update: shippersUpdateWithoutOrdersDataInput!
}

input shippersWhereInput {
  AND: [shippersWhereInput!]
  company_name: StringFilter
  NOT: [shippersWhereInput!]
  OR: [shippersWhereInput!]
  orders: ordersFilter
  phone: NullableStringFilter
  shipper_id: IntFilter
}

input shippersWhereUniqueInput {
  shipper_id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type suppliers {
  address: String
  city: String
  company_name: String!
  contact_name: String
  contact_title: String
  country: String
  fax: String
  homepage: String
  phone: String
  postal_code: String
  products(after: productsWhereUniqueInput, before: productsWhereUniqueInput, first: Int, last: Int): [products!]!
  region: String
  supplier_id: Int!
}

input suppliersCreateInput {
  address: String
  city: String
  company_name: String!
  contact_name: String
  contact_title: String
  country: String
  fax: String
  homepage: String
  phone: String
  postal_code: String
  products: productsCreateManyWithoutSuppliersInput
  region: String
  supplier_id: Int!
}

input suppliersCreateOneWithoutProductsInput {
  connect: suppliersWhereUniqueInput
  create: suppliersCreateWithoutProductsInput
}

input suppliersCreateWithoutProductsInput {
  address: String
  city: String
  company_name: String!
  contact_name: String
  contact_title: String
  country: String
  fax: String
  homepage: String
  phone: String
  postal_code: String
  region: String
  supplier_id: Int!
}

input suppliersOrderByInput {
  address: OrderByArg
  city: OrderByArg
  company_name: OrderByArg
  contact_name: OrderByArg
  contact_title: OrderByArg
  country: OrderByArg
  fax: OrderByArg
  homepage: OrderByArg
  phone: OrderByArg
  postal_code: OrderByArg
  region: OrderByArg
  supplier_id: OrderByArg
}

input suppliersUpdateInput {
  address: String
  city: String
  company_name: String
  contact_name: String
  contact_title: String
  country: String
  fax: String
  homepage: String
  phone: String
  postal_code: String
  products: productsUpdateManyWithoutSuppliersInput
  region: String
  supplier_id: Int
}

input suppliersUpdateManyMutationInput {
  address: String
  city: String
  company_name: String
  contact_name: String
  contact_title: String
  country: String
  fax: String
  homepage: String
  phone: String
  postal_code: String
  region: String
  supplier_id: Int
}

input suppliersUpdateOneWithoutProductsInput {
  connect: suppliersWhereUniqueInput
  create: suppliersCreateWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  update: suppliersUpdateWithoutProductsDataInput
  upsert: suppliersUpsertWithoutProductsInput
}

input suppliersUpdateWithoutProductsDataInput {
  address: String
  city: String
  company_name: String
  contact_name: String
  contact_title: String
  country: String
  fax: String
  homepage: String
  phone: String
  postal_code: String
  region: String
  supplier_id: Int
}

input suppliersUpsertWithoutProductsInput {
  create: suppliersCreateWithoutProductsInput!
  update: suppliersUpdateWithoutProductsDataInput!
}

input suppliersWhereInput {
  address: NullableStringFilter
  AND: [suppliersWhereInput!]
  city: NullableStringFilter
  company_name: StringFilter
  contact_name: NullableStringFilter
  contact_title: NullableStringFilter
  country: NullableStringFilter
  fax: NullableStringFilter
  homepage: NullableStringFilter
  NOT: [suppliersWhereInput!]
  OR: [suppliersWhereInput!]
  phone: NullableStringFilter
  postal_code: NullableStringFilter
  products: productsFilter
  region: NullableStringFilter
  supplier_id: IntFilter
}

input suppliersWhereUniqueInput {
  supplier_id: Int
}

type territories {
  employeeterritories(after: employeeterritoriesWhereUniqueInput, before: employeeterritoriesWhereUniqueInput, first: Int, last: Int): [employeeterritories!]!
  region: region!
  region_id: Int!
  territory_description: String!
  territory_id: String!
}

input territoriesCreateInput {
  employeeterritories: employeeterritoriesCreateManyWithoutTerritoriesInput
  region: regionCreateOneWithoutTerritoriesInput!
  territory_description: String!
  territory_id: String!
}

input territoriesCreateManyWithoutRegionInput {
  connect: [territoriesWhereUniqueInput!]
  create: [territoriesCreateWithoutRegionInput!]
}

input territoriesCreateOneWithoutEmployeeterritoriesInput {
  connect: territoriesWhereUniqueInput
  create: territoriesCreateWithoutEmployeeterritoriesInput
}

input territoriesCreateWithoutEmployeeterritoriesInput {
  region: regionCreateOneWithoutTerritoriesInput!
  territory_description: String!
  territory_id: String!
}

input territoriesCreateWithoutRegionInput {
  employeeterritories: employeeterritoriesCreateManyWithoutTerritoriesInput
  territory_description: String!
  territory_id: String!
}

input territoriesFilter {
  every: territoriesWhereInput
  none: territoriesWhereInput
  some: territoriesWhereInput
}

input territoriesOrderByInput {
  region_id: OrderByArg
  territory_description: OrderByArg
  territory_id: OrderByArg
}

input territoriesScalarWhereInput {
  AND: [territoriesScalarWhereInput!]
  employeeterritories: employeeterritoriesFilter
  NOT: [territoriesScalarWhereInput!]
  OR: [territoriesScalarWhereInput!]
  region_id: IntFilter
  territory_description: StringFilter
  territory_id: StringFilter
}

input territoriesUpdateInput {
  employeeterritories: employeeterritoriesUpdateManyWithoutTerritoriesInput
  region: regionUpdateOneRequiredWithoutTerritoriesInput
  territory_description: String
  territory_id: String
}

input territoriesUpdateManyDataInput {
  territory_description: String
  territory_id: String
}

input territoriesUpdateManyMutationInput {
  territory_description: String
  territory_id: String
}

input territoriesUpdateManyWithoutRegionInput {
  connect: [territoriesWhereUniqueInput!]
  create: [territoriesCreateWithoutRegionInput!]
  delete: [territoriesWhereUniqueInput!]
  deleteMany: [territoriesScalarWhereInput!]
  disconnect: [territoriesWhereUniqueInput!]
  set: [territoriesWhereUniqueInput!]
  update: [territoriesUpdateWithWhereUniqueWithoutRegionInput!]
  updateMany: [territoriesUpdateManyWithWhereNestedInput!]
  upsert: [territoriesUpsertWithWhereUniqueWithoutRegionInput!]
}

input territoriesUpdateManyWithWhereNestedInput {
  data: territoriesUpdateManyDataInput!
  where: territoriesScalarWhereInput!
}

input territoriesUpdateOneRequiredWithoutEmployeeterritoriesInput {
  connect: territoriesWhereUniqueInput
  create: territoriesCreateWithoutEmployeeterritoriesInput
  update: territoriesUpdateWithoutEmployeeterritoriesDataInput
  upsert: territoriesUpsertWithoutEmployeeterritoriesInput
}

input territoriesUpdateWithoutEmployeeterritoriesDataInput {
  region: regionUpdateOneRequiredWithoutTerritoriesInput
  territory_description: String
  territory_id: String
}

input territoriesUpdateWithoutRegionDataInput {
  employeeterritories: employeeterritoriesUpdateManyWithoutTerritoriesInput
  territory_description: String
  territory_id: String
}

input territoriesUpdateWithWhereUniqueWithoutRegionInput {
  data: territoriesUpdateWithoutRegionDataInput!
  where: territoriesWhereUniqueInput!
}

input territoriesUpsertWithoutEmployeeterritoriesInput {
  create: territoriesCreateWithoutEmployeeterritoriesInput!
  update: territoriesUpdateWithoutEmployeeterritoriesDataInput!
}

input territoriesUpsertWithWhereUniqueWithoutRegionInput {
  create: territoriesCreateWithoutRegionInput!
  update: territoriesUpdateWithoutRegionDataInput!
  where: territoriesWhereUniqueInput!
}

input territoriesWhereInput {
  AND: [territoriesWhereInput!]
  employeeterritories: employeeterritoriesFilter
  NOT: [territoriesWhereInput!]
  OR: [territoriesWhereInput!]
  region: regionWhereInput
  region_id: IntFilter
  territory_description: StringFilter
  territory_id: StringFilter
}

input territoriesWhereUniqueInput {
  territory_id: String
}

type usstates {
  state_abbr: String
  state_id: Int!
  state_name: String
  state_region: String
}

input usstatesCreateInput {
  state_abbr: String
  state_id: Int!
  state_name: String
  state_region: String
}

input usstatesOrderByInput {
  state_abbr: OrderByArg
  state_id: OrderByArg
  state_name: OrderByArg
  state_region: OrderByArg
}

input usstatesUpdateInput {
  state_abbr: String
  state_id: Int
  state_name: String
  state_region: String
}

input usstatesUpdateManyMutationInput {
  state_abbr: String
  state_id: Int
  state_name: String
  state_region: String
}

input usstatesWhereInput {
  AND: [usstatesWhereInput!]
  NOT: [usstatesWhereInput!]
  OR: [usstatesWhereInput!]
  state_abbr: NullableStringFilter
  state_id: IntFilter
  state_name: NullableStringFilter
  state_region: NullableStringFilter
}

input usstatesWhereUniqueInput {
  state_id: Int
}
