generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  category_id   Int        @id
  category_name String
  description   String?
  // This type is currently not supported.
  // picture    binary?
  products      Products[]
}

model CustomerCustomerDemo {
  customer_id           String
  customer_type_id      String
  customers             Customers             @relation(fields: [customer_id], references: [customer_id])
  customer_demographics CustomerDemographics @relation(fields: [customer_type_id], references: [customer_type_id])

  @@id([customer_id, customer_type_id])
}

model CustomerDemographics {
  customer_desc          String?
  customer_type_id       String                   @id
  customer_customer_demo CustomerCustomerDemo[]
}

model Customers {
  address                String?
  city                   String?
  company_name           String
  contact_name           String?
  contact_title          String?
  country                String?
  customer_id            String                   @id
  fax                    String?
  phone                  String?
  postal_code            String?
  region                 String?
  customer_customer_demo CustomerCustomerDemo[]
  orders                 Orders[]
}

model EmployeeTerritories {
  employee_id  Int
  territory_id String
  employees    Employees   @relation(fields: [employee_id], references: [employee_id])
  territories  Territories @relation(fields: [territory_id], references: [territory_id])

  @@id([employee_id, territory_id])
}

model Employees {
  address              String?
  birth_date           DateTime?
  city                 String?
  country              String?
  employee_id          Int                    @id
  extension            String?
  first_name           String
  hire_date            DateTime?
  home_phone           String?
  last_name            String
  notes                String?
  // This type is currently not supported.
  // photo             binary?
  photo_path           String?
  postal_code          String?
  region               String?
  reports_to           Int?
  title                String?
  title_of_courtesy    String?
  employees            Employees?             @relation("employeesToemployees_reports_to", fields: [reports_to], references: [employee_id])
  employee_territories EmployeeTerritories[]
  other_employees      Employees[]            @relation("employeesToemployees_reports_to")
  orders               Orders[]
}

model OrderDetails {
  discount   Float
  order_id   Int
  product_id Int
  quantity   Int
  unit_price Float
  orders     Orders   @relation(fields: [order_id], references: [order_id])
  products   Products @relation(fields: [product_id], references: [product_id])

  @@id([order_id, product_id])
}

model Orders {
  customer_id      String?
  employee_id      Int?
  freight          Float?
  order_date       DateTime?
  order_id         Int             @id
  required_date    DateTime?
  ship_address     String?
  ship_city        String?
  ship_country     String?
  ship_name        String?
  ship_postal_code String?
  ship_region      String?
  ship_via         Int?
  shipped_date     DateTime?
  customers        Customers?      @relation(fields: [customer_id], references: [customer_id])
  employees        Employees?      @relation(fields: [employee_id], references: [employee_id])
  shippers         Shippers?       @relation(fields: [ship_via], references: [shipper_id])
  order_details    OrderDetails[]
}

model Products {
  category_id       Int?
  discontinued      Int
  product_id        Int             @id
  product_name      String
  quantity_per_unit String?
  reorder_level     Int?
  supplier_id       Int?
  unit_price        Float?
  units_in_stock    Int?
  units_on_order    Int?
  categories        Categories?     @relation(fields: [category_id], references: [category_id])
  suppliers         Suppliers?      @relation(fields: [supplier_id], references: [supplier_id])
  order_details     OrderDetails[]
}

model Region {
  region_description String
  region_id          Int           @id
  territories        Territories[]
}

model Shippers {
  company_name String
  phone        String?
  shipper_id   Int      @id
  orders       Orders[]
}

model Suppliers {
  address       String?
  city          String?
  company_name  String
  contact_name  String?
  contact_title String?
  country       String?
  fax           String?
  homepage      String?
  phone         String?
  postal_code   String?
  region        String?
  supplier_id   Int        @id
  products      Products[]
}

model Territories {
  region_id             Int
  territory_description String
  territory_id          String                 @id
  region                Region                 @relation(fields: [region_id], references: [region_id])
  employee_territories  EmployeeTerritories[]
}

model USStates {
  state_abbr   String?
  state_id     Int     @id
  state_name   String?
  state_region String?
}